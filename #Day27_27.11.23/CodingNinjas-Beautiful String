Ninja has been given a binary string 'STR containing either '0' or '1'. A binary string is called beautiful if it contains alternating Os and 1s.
For Example: 0101', '1010', '101', '010' are beautiful strings. He wants to make 'STR' beautiful by performing some operations on it. In one operation,
Ninja can convert '0' into '1' or vice versa.Your task is to determine the minimum number of operations Ninja should perform to make 'STR' beautiful.


CODE:
public class Solution 
{
    public static String generate(int n,boolean zero)
    {
        StringBuilder ans = new StringBuilder();
        if(n == 0) 
            return ans.toString();
        if(zero)
        {
            ans.append('0');
            n--;
        }
        else 
        {       
            ans.append('1');
            n--;
        }
        while(n!=0)
        {
            char temp = (ans.charAt(ans.length()-1) == '0') ? '1' : '0';
            ans.append(temp);
            n--;
        }    
        return ans.toString();
    }
    public static int change(String str,String s,int n)
    {
        int ans = 0;
        for(int i = 0 ; i < n ; i ++)
        {
            if(str.charAt(i) == s.charAt(i))
                ans++;
        }
        return ans;
    }
    public static int makeBeautiful(String str) {
        int n = str.length();
        String g1 = generate(n,true);
        int diff1 = change(str,g1,n);

        String g2 = generate(n,false);
        int diff2 = change(str,g2,n);
        return Math.min(diff1,diff2);
    }
}
