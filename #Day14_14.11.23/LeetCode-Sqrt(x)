Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.
You must not use any built-in exponent function or operator.


CODE:
class Solution 
{
    static double Square(double n,double i, double j)
    {
        double mid = (i + j) / 2;
        double mul = mid * mid;
    
        // If mid itself is the square root,
        // return mid
        if ((mul == n) ||(Math.abs(mul - n) < 0.00001))
            return mid;
    
        // If mul is less than n, 
        // recur second half
        else if (mul < n)
            return Square(n, mid, j);
    
        // Else recur first half
        else
            return Square(n, i, mid);
    }

    public int mySqrt(int x) 
    {
        double i = 1;
        double res = 0;
        boolean found = false;
        while (!found) 
        {
            if (i * i == x) 
            {
                res = i;
                found = true;
            }
            
            else if (i * i > x) 
            {
                res = Square(x, i - 1, i);
                found = true;
            }
            i++;
        }
        return (int)res;
    }
}




    





        
 
