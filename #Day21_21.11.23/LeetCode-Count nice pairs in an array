You are given an array nums that consists of non-negative integers. Let us define rev(x) as the reverse of the non-negative integer x. 
For example, rev(123) = 321, and rev(120) = 21. A pair of indices (i, j) is nice if it satisfies all of the following conditions:
1.0 <= i < j < nums.length  2.nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])
Return the number of nice pairs of indices. Since that number can be too large, return it modulo 109 + 7.


CODE:
class Solution 
{
    public int reverse(int n)
    {
       int rev = 0;
        while(n > 0)
        {
            rev = rev*10 + (n%10);
            n/=10;
        }
        return rev;
    }

    public int countNicePairs(int[] nums) 
    {
        int count = 0;
        for(int i = 0 ; i < nums.length; i ++)
        {
            for(int j = i+1 ; j < nums.length ; j ++)
            {
                if(nums[i] + reverse(nums[j]) == nums[j] + reverse(nums[i]))
                {
                    count ++;
                }
            }
        }
        return count % 1000000007;
        }
    }
