Given an array A of N integers.Find the count of subarrays whose product of elements is a perfect cube.


CODE:
import java.util.Scanner;
class Main
{
    public static int cube(int num,int count)
    {
        double cuberoot = Math.cbrt(num);
        int n = (int)cuberoot;
        if(Math.pow(n,3) == num)
            count ++;
        return count;    
    }
    public static void subarray(int n,int arr[])
    {
        int dp[][] = new int[n][n];
        for(int i = 0 ; i < n ; i ++)
        {
            dp[i][i] = arr[i];
        }
        int total=0;
        for(int L = 2 ; L <= n ; L ++)
        {
            for(int i = 0 ; i <= n-L ; i ++)
            {
                for(int j = i+L-1 ; j <= i+L-1 ; j ++)
                {
                     dp[i][j] = dp[i][j-1] * arr[j];
                        total += cube(dp[i][j],0);
                }
            }
        }
        for(int L = 2 ; L <= n ; L ++)
        {
            for(int i = 0 ; i <= n-L ; i ++)
            {
                for(int j = i+L-1 ; j <= i+L-1 ; j ++)
                {
                    
                }
            }
        }
        System.out.println(total);
    }
    public static void main(String args[] ) 
    {
        Scanner s = new Scanner(System.in);
        int n = s.nextInt();
        int arr[] = new int[n];
        for(int i = 0 ; i < n ; i ++)
             arr[i] = s.nextInt();
        subarray(n,arr);

    }
}
