You have been given a 9X9 2D matrix 'MATRIX' with some cells filled with digits(1-9), and some empty cells (denoted by 0).
You need to find whether there exists a way to fill all the empty cells with some digit(1-9) such that the final matrix is a valid Sudoku solution.
A Sudoku solution must satisfy all the following conditions-
1. Each of the digits 1-9 must occur exactly once in each row. 2. Each of the digits 1-9 must occur exactly once in each column.
3. Each of the digits 1-9 must occur exactly once in each of the 9, 3 x 3 sub- matrices of the matrix.
Note:
1. There will always be a cell in the matrix which is empty.
2. The given initial matrix will always be consistent according to the rules mentioned in the problem statement.


CODE:
public class Solution {
    public static boolean emptycell(int[][] board,int point[])
    {
        for(int row = 0 ; row < 9 ; row ++)
        {
            for(int col = 0 ; col < 9 ; col ++)
            {
                if(board[row][col] == 0)
                {
                    point[0] = row;
                    point[1] = col;
                    return true;
                }
            }
        }
        return false;
    }

    public static boolean checkRow(int[][] board,int row,int num)
    {
        for(int j = 0 ; j < 9 ; j ++)
        {
            if(board[row][j] == num)
                return false;
        }
        return true;
    }
    public static boolean checkCol(int[][] board, int col,int num)
    {
        for(int i = 0 ; i < 9 ; i ++)
        {
            if(board[i][col] == num)
                return false;
        }
        return true;
    }
    public static boolean checkGrid(int[][] board,int row, int col, int num)
    {
        for(int i = row ; i < row+3 ; i ++)
        {
            for(int j = col ; j < col+3 ; j ++)
            {
                if(board[i][j] == num)
                    return false;
            }
        }
        return true;
    }
    public static boolean isSafe(int[][]board,int row,int col,int num)
    {
       if(checkRow(board,row,num) && checkCol(board,col,num) && checkGrid(board,(row-(row%3)),(col-(col%3)),num) && (board[row][col]== 0))
        return true;
      return false; 
    }
	public static boolean isItSudoku(int matrix[][]) 
	{ 
        int[] point = new int[2];
        if(emptycell(matrix,point) == false)
            return true;
        int row = point[0];
        int col = point[1];
        for(int num = 1 ; num <= 9 ; num ++)
        {
            if(isSafe(matrix,row,col,num))
            {
                matrix[row][col] = num; 
                if(isItSudoku(matrix))
                    return true;
                else
                    matrix[row][col] = 0;
            }
        }        
    return false;
    }
}
